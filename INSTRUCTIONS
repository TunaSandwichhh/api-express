Consegna:

Repository condiviso attraverso l'account alexandruCochiorCorley.
README che fornisce istruzioni per avviare l'applicativo.
Collection Postman/Swagger per illustrare le chiamate.
Requisiti:

Uno o più container per il database. La scelta del database e la decisione di separarli è a tua discrezione.
API in Node (JavaScript o TypeScript) con Express o alternative come Nest.
Validazione degli input tramite middleware.
Gestione errori con status code appropriati.
Use Case: Creazione di 2 microservizi per la gestione di camere e prenotazioni di un albergo con i seguenti endpoint:

POST /camere
GET /camere/:id
POST /prenotazioni ( input: data e id camera) !!attenzione alle sovrapposizioni!!
GET /prenotazioni/:id
Le specifiche relative al modello delle entità sono flessibili, ma è essenziale gestire le sovrapposizioni di prenotazioni e fornire un messaggio di errore nel caso di camera non esistente.

Mentre non è necessario perfezionare ogni aspetto, sarebbe apprezzata una discussione sulla strategia che si sarebbe adottata. Puoi anche ampliare o complicare ulteriormente qualsiasi punto, se lo ritieni opportuno.

